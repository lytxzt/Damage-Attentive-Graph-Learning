import numpy as np
import Utils
import random
import matplotlib.pyplot as plt
from scipy import stats
from matplotlib.backends.backend_agg import FigureCanvasAgg

# step_my_dd = [121, 209, 172, 169, 291, 106, 147, 191, 222, 182, 176, 310, 262, 313, 144, 232, 238, 315, 141, 87, 215, 165, 296, 172, 180, 388, 399, 199, 236, 337, 61, 318, 257, 330, 278, 359, 170, 168, 297, 99, 107, 204, 208, 313, 197, 190, 139, 285, 140, 189, 346, 306, 234, 213, 105, 250, 312, 239, 212, 239, 117, 164, 163, 190, 315, 166, 291, 259, 264, 126, 197, 224, 289, 109, 198, 171, 269, 331, 182, 100, 96, 171, 102, 339, 299, 269, 231, 329, 150, 300, 185, 181, 94, 134, 112, 230, 143, 242, 152, 363]
# step_my_kd = []
# step_mgcn = [138, 362, 294, 399, 346, 119, 324, 229, 156, 175]

# 10.30
# step_my_dd = [124, 270, 281, 321, 328, 168, 311, 152, 154, 241, 250, 373, 237, 202, 128, 245, 131, 280, 88, 121, 242, 303, 241, 260, 272, 344, 306, 213, 259, 283, 188, 301, 449, 373, 221, 249, 336, 64, 398, 326, 98, 268, 224, 284, 131, 382, 129, 272, 201, 181]
# step_my_kd = [145, 254, 286, 265, 287, 273, 241, 159, 140, 198, 264, 401, 162, 273, 108, 360, 275, 228, 75, 30, 264, 226, 353, 273, 131, 394, 417, 199, 224, 191, 184, 307, 257, 352, 336, 351, 242, 234, 368, 207, 175, 229, 193, 236, 84, 335, 130, 280, 208, 209]
# step_mgcn = [134, 313, 352, 260, 366, 244, 229, 149, 185, 187, 247, 329, 275, 309, 161, 348, 141, 179, 83, 192, 298, 251, 220, 245, 120, 386, 298, 194, 286, 71, 162, 297, 254, 413, 239, 332, 235, 167, 325, 140, 101, 288, 165, 202, 156, 395, 111, 278, 196, 135]

# 11.2
# step_my_dd = [174, 284, 170, 160, 336, 198, 208, 130, 176, 212, 354, 267, 203, 18, 328, 93, 164, 222, 225, 229, 157, 239, 346, 196, 207, 189, 330, 194, 212, 208, 207, 232, 139, 137, 100, 88, 142, 254, 211, 222, 289, 207, 166, 156, 401, 173, 449, 173, 33, 104]
# step_my_kd = [153, 226, 144, 308, 382, 215, 231, 108, 179, 212, 353, 302, 228, 40, 409, 53, 203, 230, 158, 202, 184, 213, 366, 174, 274, 176, 357, 206, 190, 274, 206, 213, 194, 106, 134, 124, 151, 234, 257, 166, 311, 230, 234, 182, 342, 158, 305, 185, 202, 73]
# step_mgcn = [301, 267, 152, 257, 343, 234, 203, 157, 168, 66, 416, 314, 216, 125, 281, 86, 144, 214, 242, 204, 160, 315, 407, 287, 99, 157, 356, 188, 202, 178, 191, 136, 233, 243, 118, 242, 190, 176, 296, 158, 324, 273, 153, 238, 368, 216, 312, 196, 146, 135]

# 11.27
# step_my_dd = [144, 318, 109, 93, 233, 204, 247, 186, 132, 29, 268, 168, 277, 120, 203, 180, 229, 181, 127, 241, 171, 102, 209, 173, 196, 201, 152, 119, 236, 116, 207, 151, 129, 158, 143, 189, 207, 132, 221, 168, 232, 240, 115, 183, 201, 210, 182, 170, 173, 210]

# 11.29
# step_mgcn = [231, 175, 286, 237, 357, 239, 161, 145, 128, 23, 394, 343, 247, 93, 371, 145, 269, 245, 219, 378, 21, 266, 439, 254, 159, 180, 424, 233, 273, 183, 174, 204, 270, 115, 144, 219, 205, 199, 236, 177, 345, 279, 156, 363, 368, 275, 332, 203, 56, 117]
# step_my_kd = [156, 205, 54, 182, 303, 201, 263, 203, 215, 227, 315, 245, 270, 196, 326, 111, 202, 233, 195, 296, 44, 176, 359, 191, 179, 270, 243, 153, 225, 279, 163, 164, 244, 185, 183, 156, 179, 150, 240, 223, 313, 232, 65, 241, 287, 251, 246, 224, 157, 162]
# step_my_dd = [144, 318, 109, 93, 233]

# 11.30
# k5
# step_my_kd = [156, 205, 54, 182, 303, 201, 263, 203, 215, 227, 315, 245, 270, 196, 326, 111, 202, 233, 195, 296, 44, 176, 359, 191, 179, 270, 243, 153, 225, 279, 163, 164, 244, 185, 183, 156, 179, 150, 240, 223, 313, 232, 65, 241, 287, 251, 246, 224, 157, 162]
# k4
# step_my_kd = [180, 255, 280, 449, 299, 202, 248, 303, 181, 260, 288, 347, 281, 15, 333, 244, 188, 226, 252, 217, 148, 125, 262, 273, 108, 225, 255, 241, 449, 165, 352, 174, 198, 120, 63, 257, 163, 198, 306, 304, 279, 385, 67, 104, 315, 170, 276, 259, 99, 94]
# k3
# step_my_kd = [295, 251, 417, 157, 406, 207, 413, 518, 240, 261, 327, 420, 381, 315, 536, 186, 303, 366, 409, 385, 415, 162, 466, 293, 217, 206, 339, 175, 309, 372, 359, 284, 240, 329, 322, 280, 433, 314, 222, 406, 337, 352, 190, 313, 323, 258, 333, 221, 424, 252]
# k6
# step_my_kd =  [203, 274, 26, 239, 321, 172, 154, 204, 171, 335, 406, 348, 288, 57, 346, 310, 135, 211, 154, 312, 32, 230, 378, 314, 153, 229, 356, 242, 223, 129, 173, 127, 212, 249, 63, 352, 234, 261, 302, 220, 381, 228, 246, 249, 288, 123, 250, 252, 182, 296]
# k7
# step_my_kd = [165, 353, 52, 230, 379, 186, 224, 342, 138, 143, 398, 283, 227, 81, 427, 277, 160, 349, 229, 277, 58, 241, 365, 219, 407, 92, 359, 137, 224, 193, 122, 130, 327, 324, 77, 448, 388, 402, 334, 178, 428, 414, 372, 320, 285, 144, 379, 251, 104, 366]

# 12.1
# k8
# step_my_kd = [160, 299, 97, 209, 438, 158, 271, 286, 127, 116, 474, 391, 131, 115, 374, 295, 162, 408, 265, 152, 92, 209, 377, 212, 195, 91, 294, 166, 202, 108, 130, 109, 172, 192, 111, 334, 177, 231, 305, 131, 460, 352, 481, 327, 372, 121, 278, 299, 69, 406]
# k2
# step_my_kd = [217, 314, 407, 219, 361, 467, 536, 442, 255, 171, 315, 396, 187, 394, 553, 599, 262, 490, 532, 164, 336, 249, 423, 383, 410, 397, 556, 329, 313, 259, 586, 400, 88, 133, 170, 599, 482, 225, 136, 599, 381, 479, 376, 331, 408, 265, 402, 469, 375, 355]
# 12.5 d50
# step_mgcn = [170, 263, 205, 283, 287, 182, 254, 131, 158, 39, 362, 198, 267, 148, 348, 143, 168, 239, 178, 194, 87, 253, 337, 224, 157, 166, 360, 164, 265, 175, 152, 168, 296, 144, 119, 375, 137, 135, 295, 222, 386, 256, 222, 340, 394, 220, 297, 245, 92, 173]

# step = [22, 31, 26, 699, 4, 699, 4, 4, 14, 22, 699, 4, 26, 699, 30, 58, 1, 16, 12, 21]

# # step_my_dd = np.array(step_my_dd)
# # step_my_kd = np.array(step_my_kd)
# # step_mgcn = np.array(step_mgcn)
# print(np.mean(np.array(step)))

# print(np.mean(step_my_dd), np.mean(step_my_kd), np.mean(step_mgcn))

# figure,axes=plt.subplots()
# axes.boxplot([step_my_dd, step_my_kd, step_mgcn],patch_artist=True) #描点上色
# axes.yaxis.grid(True)
# axes.set_ylabel('Recovery Step')
# plt.setp(axes, xticks=[1,2,3], xticklabels=['DD_GCN', 'KD_grad', 'CR_MGC'])
# plt.show()

# pos = [np.array([101.22486115, 215.91682902]), np.array([127.71011621, 729.77926558]), np.array([648.08736205, 648.42037695])]

# plt.figure()
# for (x,y) in pos:
#     plt.gcf().gca().add_artist(plt.Circle((x,y), 120, color='#000000'))

# plt.xlim(0,1000)
# plt.ylim(0,1000)
# # plt.show()

# canvas = FigureCanvasAgg(plt.gcf())
# canvas.draw()

# w, h = canvas.get_width_height()

# buf = np.fromstring(canvas.tostring_argb(), dtype=np.uint8)

# buf.shape = (w,h,4)
# buf = np.roll(buf, 3, axis=2)

# # print(list(buf[:,:,1]))
# print(np.sum(buf[:,:,1]==0)/(w*h))

degrees = [23, 19, 25, 9, 8, 18, 22, 17, 26, 4, 17, 25, 12, 24, 10, 28, 13, 4, 13, 20, 28, 18, 17, 4, 23, 4, 19, 25, 27, 32, 21, 2, 26, 24, 23, 27, 11, 13, 7, 15, 27, 24, 26, 8, 27, 8, 29, 29, 26, 22, 6, 24, 22, 10, 12, 24, 26, 13, 2, 29, 24, 28, 24, 5, 22, 22, 9, 20, 23, 26, 29, 28, 26, 11, 26, 3, 16, 12, 23, 8, 15, 24, 23, 4, 9, 2, 24, 26, 28, 10, 12, 24, 12, 3, 3, 13, 28, 12, 13, 29, 25, 26, 4, 29, 7, 23, 24, 29, 25, 13, 29, 28, 14, 27, 21, 12, 15, 27, 22, 14, 24, 4, 12, 24, 29, 10, 10, 25, 2, 6, 31, 23, 29, 13, 4, 19, 29, 24, 12, 7, 14, 6, 15, 17, 30, 24, 2, 20, 9, 12, 9, 4, 12, 3, 7, 6, 10, 2, 5, 3, 4, 4, 14, 10, 12, 8, 7, 9, 10, 6, 13, 11, 2, 3, 3, 9, 13, 2, 4, 5, 4, 6, 6, 2, 4, 11, 9, 6, 10, 6, 8, 12, 8, 5, 12, 3, 6, 2, 11, 11, 9, 8, 8, 6, 3, 10, 13, 6, 5, 6, 5, 13, 15, 1, 6, 11, 9, 4, 3, 8, 6, 4, 6, 9, 3, 7, 12, 6, 2, 4, 12, 10, 5, 7, 5, 2, 9, 3, 8, 8, 12, 5, 8, 6, 6, 2, 3, 7, 3, 5, 7, 6, 4, 5, 5, 9, 12, 13, 9, 8, 3, 8, 9, 9, 4, 4, 8, 2, 4, 4, 6, 6, 7, 4, 2, 5, 8, 8, 10, 10, 8, 12, 9, 9, 7, 11, 11, 5, 7, 1, 8, 13, 7, 11, 8, 4, 7, 3, 6, 6, 16, 3, 18, 5, 9, 6, 6, 20, 21, 16, 10, 6, 6, 11, 17, 5, 15, 15, 15, 17, 4, 6, 3, 25, 7, 11, 4, 11, 5, 3, 15, 12, 5, 10, 8, 13, 6, 19, 20, 2, 5, 1, 14, 15, 20, 19, 25, 18, 3, 19, 23, 7, 5, 5, 13, 14, 7, 6, 7, 3, 17, 6, 15, 3, 16, 19, 3, 14, 16, 3, 14, 3, 8, 3, 2, 15, 11, 19, 17, 10, 6, 21, 8, 2, 2, 15, 8, 13, 6, 6, 4, 5, 14, 16, 9, 11, 1, 5, 7, 3, 25, 15, 20, 21, 15, 18, 7, 19, 11, 5, 19, 16, 17, 6, 8, 10, 1, 3, 9, 11, 4, 11, 2, 4, 9, 10, 16, 9, 8, 6, 15, 20, 19, 6, 21, 25, 5, 12, 3, 11, 20, 12, 25, 19, 1, 12, 11, 4, 7, 6, 10, 3, 8, 7, 15, 5, 3, 2, 5, 16, 10, 10, 6, 7, 10, 12, 6, 15, 5, 4, 5, 10, 4, 7, 7, 3, 4, 2, 3, 8, 9, 8, 11, 6, 7, 2, 12, 10, 7, 12, 8, 4, 6, 2, 11, 16, 8, 8, 6, 5, 13, 8, 5, 6, 7, 8, 2, 6, 16, 17, 5, 14, 8, 6, 4, 10, 8, 4, 9, 3, 7, 10, 15, 13, 8, 8, 8, 5, 6, 8, 9, 5, 12, 5, 5, 8, 10, 6, 6, 3, 1, 3, 8, 14, 10, 9, 6, 10, 6]

drange = range(150)
dcount = []

for d in drange:
    dcount.append(np.sum(np.array(degrees)==d))

plt.figure()
plt.plot(drange, dcount)
plt.show()


# degrees_avg = np.mean(np.array(degrees))
# degrees_var = np.var(np.array(degrees))

# print(degrees_avg, degrees_var)

# degree_range = [i+1 for i in range(max(degrees))]
# # print(degree_range)
# degree_distribution = np.zeros(len(degree_range))
# for i in degrees:
#     degree_distribution[i-1] += 1

# degree_poisson = [stats.poisson.pmf(k, degrees_avg)*len(degrees) for k in degree_range]

# degree_sequence = sorted(degrees, reverse=True)
# max_degree = 200 - 100 - 1
# # print(np.var(np.array(degree_distribution) - np.array(degree_poisson)))

# plt.figure(figsize=(8, 6))
# plt.hist(degree_sequence, bins=max_degree, range=[0.5,max_degree+0.5], rwidth=0.6)
# # plt.plot(degree_range, degree_poisson, c='r')
# # plt.plot(degree_range, degree_distribution)
# plt.ylim(0, 350)
# plt.title("Degree Distribution")
# plt.xlabel("Degree")
# plt.ylabel("Node Num")
# plt.show()
     
# d = [6,8,10,12,14,16,18,20,22,24]
# s = [0.0470, 0.0367, 0.0223, 0.0133, 0.0062, 0.0043, 0.0044, 0.0068, 0.0073, 0.0087]

# plt.figure()
# plt.plot(d, s, c='b', marker='o')
# plt.xlim(0,25)
# plt.ylim(0,0.05)
# plt.grid()
# plt.xlabel('distance of A and B tag')
# plt.ylabel('S_int')
# plt.show()



